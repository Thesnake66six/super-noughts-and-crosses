warning: unused imports: `Receiver`, `SyncSender`, `fmt::Display`
 --> src\main.rs:2:5
  |
2 |     fmt::Display, fs, path::Path, process::Command, sync::mpsc::{self, Receiver, SyncSender}, thread, time::{self, Duration}
  |     ^^^^^^^^^^^^                                                       ^^^^^^^^  ^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `ego_tree::Tree`
 --> src\main.rs:7:5
  |
7 | use ego_tree::Tree;
  |     ^^^^^^^^^^^^^^

warning: unused import: `std::fmt::DebugStruct`
 --> src\board.rs:1:5
  |
1 | use std::fmt::DebugStruct;
  |     ^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `Cell`
 --> src\monte_carlo\monte_carlo.rs:7:12
  |
7 |     cell::{Cell, Value},
  |            ^^^^

warning: unused import: `graphvis_ego_tree::TreeWrapper`
  --> src\monte_carlo\monte_carlo.rs:11:5
   |
11 | use graphvis_ego_tree::TreeWrapper;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused variable: `c`
   --> src\monte_carlo\monte_carlo.rs:128:13
    |
128 |         let c = moves.len();
    |             ^ help: if this is intentional, prefix it with an underscore: `_c`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `opt_for`
   --> src\monte_carlo\monte_carlo.rs:108:47
    |
108 |     pub fn expand(&mut self, node_id: NodeId, opt_for: Turn) -> NodeId {
    |                                               ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_opt_for`

warning: unused variable: `exploration_factor`
   --> src\monte_carlo\monte_carlo.rs:265:9
    |
265 |         exploration_factor: f32,
    |         ^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_exploration_factor`

warning: unused variable: `rect`
   --> src\ui.rs:297:44
    |
297 |     pub fn draw_game<T: RaylibDraw>(&self, rect: Rectangle, d: &mut T, g: &Game, font: &Font) {
    |                                            ^^^^ help: if this is intentional, prefix it with an underscore: `_rect`

warning: unused variable: `g`
   --> src\ui.rs:377:76
    |
377 |     pub fn draw_settings<T: RaylibDraw>(&self, rect: Rectangle, d: &mut T, g: &Game, font: &Font) {
    |                                                                            ^ help: if this is intentional, prefix it with an underscore: `_g`

warning: unused variable: `spawn`
  --> src\main.rs:37:9
   |
37 |     let spawn = thread::spawn(move || {
   |         ^^^^^ help: if this is intentional, prefix it with an underscore: `_spawn`

warning: associated items `new_cells` and `moves` are never used
   --> src\board.rs:29:12
    |
19  | impl Board {
    | ---------- associated items in this implementation
...
29  |     pub fn new_cells(cells: [Cell; 9]) -> Self {
    |            ^^^^^^^^^
...
130 |     pub fn moves(&self, pos: &[usize]) -> Vec<Vec<usize>> {
    |            ^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: method `moves` is never used
  --> src\cell.rs:92:12
   |
80 | impl Cell {
   | --------- method in this implementation
...
92 |     pub fn moves<'a>(&'a self, pos: &'a [usize]) -> Vec<Vec<usize>> {
   |            ^^^^^

warning: variants `GetMoveNow`, `GetThoughts`, and `Move` are never constructed
  --> src\monte_carlo\message.rs:9:5
   |
4  | pub enum Message {
   |          ------- variants in this enum
...
9  |     GetMoveNow(),
   |     ^^^^^^^^^^
10 |     GetThoughts(),
   |     ^^^^^^^^^^^
11 |     Move(Vec<usize>),
   |     ^^^^

warning: variants `Maximum`, `Frail`, `Minimum`, `Random`, and `UCB1` are never constructed
  --> src\monte_carlo\monte_carlo.rs:18:5
   |
16 | pub enum MonteCarloPolicy {
   |          ---------------- variants in this enum
17 |     Robust,
18 |     Maximum,
   |     ^^^^^^^
19 |     Frail,
   |     ^^^^^
20 |     Minimum,
   |     ^^^^^^^
21 |     Random,
   |     ^^^^^^
22 |     UCB1,
   |     ^^^^
   |
   = note: `MonteCarloPolicy` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: unused `Result` that must be used
   --> src\main.rs:155:37
    |
155 | ...                   board.play(&x.value().play);
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: `#[warn(unused_must_use)]` on by default
help: use `let _ = ...` to ignore the resulting value
    |
155 |                                     let _ = board.play(&x.value().play);
    |                                     +++++++

warning: unused `Result` that must be used
   --> src\main.rs:158:37
    |
158 | ...                   board.play(&node.value().play);
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
help: use `let _ = ...` to ignore the resulting value
    |
158 |                                     let _ = board.play(&node.value().play);
    |                                     +++++++

warning: `a_level_project` (bin "a_level_project") generated 17 warnings (run `cargo fix --bin "a_level_project"` to apply 11 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target\debug\a_level_project.exe`
[src\main.rs:243] mon_const = 0
[src\main.rs:246] width / physical_width = 4.2809362
[src\main.rs:246] width = 2560.0
[src\main.rs:246] physical_width = 598.0
